const handler = async (m, { isOwner, isAdmin, conn, text, participants, args, command, usedPrefix }) => {
  
  // Bloquear prefijos no deseados si no es admin u owner
  if (usedPrefix === 'a' || usedPrefix === 'A') return;

  if (!(isAdmin || isOwner)) {
    global.dfail('admin', m, conn);
    throw false;
  }

  const mensaje = args.join` `;
  const iconoFuturista = `üöÄ **‚á¢** ${mensaje}`; // Icono futurista para el mensaje
  
  let texto = `‚ï≠‚ïê‚ïê‚ïê‚ü™ üåå **Interconexi√≥n Gal√°ctica** üåå ‚ü´‚ïê‚ïê‚ïê‚ïÆ\n`;
  texto += `üå± **¬°Reviviendo el futuro verde!**\n`;
  texto += `üëæ **Participantes conectados:** ${participants.length}\n`;
  texto += `\nüí¨ **Mensaje principal:**\n${iconoFuturista}\n\n`;
  texto += `üåç **Mapa de conexiones:**\n`;

  // Funci√≥n para obtener la bandera del pa√≠s basado en el prefijo del n√∫mero
  const obtenerBanderaPorPrefijo = (prefijo) => {
    const codigosPais = {
      '504': 'üá≠üá≥', // Honduras
      '1': 'üá∫üá∏',  // USA
      '34': 'üá™üá∏', // Espa√±a
      '52': 'üá≤üáΩ', // M√©xico
      '91': 'üáÆüá≥', // India
      '44': 'üá¨üáß', // Reino Unido
      '81': 'üáØüáµ', // Jap√≥n
      '86': 'üá®üá≥', // China
      '49': 'üá©üá™', // Alemania
      '33': 'üá´üá∑', // Francia
      '7': 'üá∑üá∫',  // Rusia
    };
    return codigosPais[prefijo] || 'üåç'; // üåç para prefijos desconocidos
  };

  // Generar la lista de participantes con sus banderas
  for (const miembro of participants) {
    const id = miembro.id.split('@')[0]; // Obtener el ID (antes de '@')
    const prefijo = id.slice(0, 3); // Obtener los primeros 3 d√≠gitos
    const bandera = obtenerBanderaPorPrefijo(prefijo);
    texto += `üë§ ${bandera} **@${id}**\n`;
  }

  texto += `‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ü™ üå± **Cultivemos el futuro** üå± ‚ü´‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ`;

  // Enviar el mensaje al grupo con las menciones
  conn.sendMessage(m.chat, { text: texto, mentions: participants.map((a) => a.id) });
};

// Metadatos del comando
handler.help = ['todos <mensaje>'];
handler.tags = ['group'];
handler.command = /^(tagall|invocar|marcar|todos|invocaci√≥n)$/i;
handler.admin = true;
handler.group = true;

export default handler;