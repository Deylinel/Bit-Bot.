const handler = async (m, { isOwner, isAdmin, conn, text, participants, args, command, usedPrefix }) => {
  
  // Restringir el uso de ciertos prefijos si no es admin u owner
  if (usedPrefix === 'a' || usedPrefix === 'A') return;

  if (!(isAdmin || isOwner)) {
    global.dfail('admin', m, conn);
    throw false;
  }

  const mensaje = args.join` `;
  const iconoFuturista = `üöÄ ‚á¢ ${mensaje}`; // Icono futurista para mensajes
  
  let texto = `‚ï≠‚ïê‚ïê‚ú¶ üåå **Conexi√≥n Intergal√°ctica** ‚ú¶‚ïê‚ïê‚ïÆ\n`;
  texto += `üå± *Revivamos las plantas del futuro*\n`;
  texto += `üëæ *Participantes conectados:* ${participants.length}\n`;
  texto += `\nüí¨ Mensaje: ${iconoFuturista}\n\n`;

  // Funci√≥n para obtener el c√≥digo del pa√≠s basado en el prefijo del n√∫mero
  const obtenerCodigoPais = (prefijo) => {
    const codigosPais = {
      '504': 'üá≠üá≥', // Honduras
      '1': 'üá∫üá∏', // USA
      '34': 'üá™üá∏', // Espa√±a
      '52': 'üá≤üáΩ', // M√©xico
    };
    return codigosPais[prefijo] || 'üåç'; // Retorna üåç si el prefijo no est√° registrado
  };

  // Listar a los participantes con su respectivo pa√≠s
  for (const miembro of participants) {
    const id = miembro.id.split('@')[0];
    const prefijo = id.slice(0, 3); // Ajustar seg√∫n formato de n√∫meros
    const codigoPais = obtenerCodigoPais(prefijo);
    texto += `üë§ ${codigoPais} @${id}\n`;
  }

  texto += `‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶ üå± *¬°Cultivemos el futuro!* ‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïØ`;

  // Enviar mensaje a todos los participantes mencionados
  conn.sendMessage(m.chat, { text: texto, mentions: participants.map((a) => a.id) });
};

// Metadatos del comando
handler.help = ['todos <mensaje>'];
handler.tags = ['group'];
handler.command = /^(tagall|invocar|marcar|todos|invocaci√≥n)$/i;
handler.admin = true;
handler.group = true;

export default handler;